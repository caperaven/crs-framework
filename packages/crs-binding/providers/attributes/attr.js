class u{#t={};get store(){return this.#t}async parse(e,n){const r=e.name.split(".")[0],s=e.ownerElement;s.removeAttribute(e.name),crs.binding.utils.markElement(s,n);const t=await crs.binding.expression.compile(e.value);if(t.parameters.properties.length==0){const i=await t.function();s.setAttribute(r,i);return}const o=this.#t[s.__uuid]||={};for(const i of t.parameters.properties)o[i]={[r]:t.key};crs.binding.data.setCallback(s.__uuid,n.bid,t.parameters.properties,".attr")}async update(e,...n){if(this.#t[e]==null)return;const r=crs.binding.elements[e],s=crs.binding.data.getDataForElement(r),t=this.#t[e];n.length==0&&(n=Object.keys(t));for(const o of n){if(t[o]==null)continue;const i=Object.keys(t[o]);for(const c of i){const a=t[o][c],l=await crs.binding.functions.get(a).function(s);r.setAttribute(c,l)}}}async clear(e){const n=this.#t[e];if(n!=null){for(const r of Object.values(n))for(const s of Object.values(r)){const t=crs.binding.functions.get(s);crs.binding.expression.release(t)}delete this.#t[e]}}}export{u as default};
