class h{#t={};get(t,i){return new Promise(async l=>{if(this.#t[t]||={count:0,queue:[],loading:!1,template:null},this.#t[t].count+=1,this.#t[t].template==null&&this.#t[t].loading===!1){this.#t[t].loading=!0;const s=await fetch(i).then(e=>e.text()),o=document.createElement("template");o.innerHTML=s,this.#t[t].template={template:o,html:s};for(const e of this.#t[t].queue)e();delete this.#t[t].loading,delete this.#t[t].queue,l(s)}this.#t[t].template==null?this.#t[t].queue.push(()=>{l(this.#t[t].template.html)}):l(this.#t[t].template.html)})}async createStoreFromElement(t,i){const l=this.#t[t]||={count:0,template:{}},s=i.querySelectorAll("template");let o=null;for(const e of s){const u=e.id||e.dataset.id;l.template[u]=e,e.dataset.default==="true"&&(o=u)}return o}async getStoreTemplate(t,i){return this.#t[t]?.template[i]?.content.cloneNode(!0)}async remove(t){this.#t[t]!=null&&(this.#t[t].count-=1,this.#t[t].count===0&&(this.#t[t].count=null,this.#t[t].template.template=null,this.#t[t].template.html=null,this.#t[t].template=null,delete this.#t[t]))}}export{h as TemplatesManager};
