class l{#o=1;#n={};#s={0:{name:"global",type:"data",data:{}}};#t={};#e={};#i={};#l(){const t=this.#o;return this.#o+=1,t}#a(t){return typeof t=="object"?t.bid:t}get globals(){return this.#s[0].data}async#r(t,e){if(this.#t[t]==null)return;const n=this.#t[t]?.[e];if(n!=null){for(const s of n.values())typeof s=="function"?await s():await crs.binding.providers.update(s,e);return}for(const s of Object.keys(this.#t[t]))s.indexOf(e)==0&&await this.#r(t,s)}setCallback(t,e,n,s){const a=this.#t[e]||={};for(const i of n){if(i.indexOf(GLOBALS)!==-1){this.setCallback(t,0,[i.replace(GLOBALS,"")],s);continue}a[i]==null&&(a[i]=new Set),a[i].add(t),this.#i[t]||=new Set,this.#i[t].add(s)}}addContextCallback(t,e){this.#e[t]==null&&(this.#e[t]=new Set),this.#e[t].add(e)}removeContextCallback(t,e){this.#e[t]!=null&&(this.#e[t].delete(e),this.#e[t].size==0&&delete this.#e[t])}addObject(t,e={}){const n=this.#l();return this.#s[n]={name:t,type:"data",data:e},this.#t[n]={},n}addContext(t,e){this.#n[t]=e}getContext(t){return this.#n[t]}getData(t){return t=this.#a(t),this.#s[t]}getCallbacks(t,e){const n=this.#t[t]?.[e];return n==null?[]:Array.from(n)}getDataForElement(t){const e=t?.__bid;return e==null?void 0:crs.binding.data.getData(e).data}remove(t){t=this.#a(t);const e=this.#n[t];if(e==null)return;if(e.boundElements!=null){for(const s of e.boundElements)delete this.#i[s];delete e.boundElements}crs.binding.utils.disposeProperties(this.#s[t]),crs.binding.utils.disposeProperties(this.#n[t]),crs.binding.utils.disposeProperties(this.#t[t]),delete this.#s[t],delete this.#n[t],delete this.#t[t],delete this.#e[t],crs.binding.dataDef!=null&&crs.binding.dataDef.remove(t);const n=crs.binding.providers.attrProviders[".changed."];typeof n!="string"&&n.clear(t)}getProperty(t,e){return e==="bid"?t:(e.indexOf(GLOBALS)!==-1&&(t=0,e=e.replace(GLOBALS,"")),t=this.#a(t),crs.binding.utils.getValueOnPath(this.getData(t)?.data,e))}async setProperty(t,e,n){const s=this.getProperty(t,e);let a=e;if(a.indexOf(GLOBALS)!==-1&&(t=0,a=e.replace(GLOBALS,"")),t=this.#a(t),Array.isArray(n)&&(n.__bid=t,n.__property=a,n=(await import("./../proxies/array-proxy.js")).default(n)),crs.binding.utils.setValueOnPath(this.getData(t)?.data,a,n),await this.#r(t,a),t!==0){const r=this.#n[t];r!=null&&(r.propertyChanged?.(e,n,s),r[`${e}Changed`]?.(n,s))}if(this.#e[t]!=null)for(const r of this.#e[t])r?.(e,n,s);crs.binding.dataDef!=null&&(await crs.binding.dataDef.automateValues(t,e),await crs.binding.dataDef.automateValidations(t,e));const i=crs.binding.providers.attrProviders[".changed."];typeof i!="string"&&await i.update(t,e)}async updateProperty(t,e,n){let s=this.getProperty(t,e);s=await n(s),await this.setProperty(t,e,s)}setName(t,e){t=this.#a(t);const n=crs.binding.data.getData(t);n.name=e}async updateElement(t){const e=t.__bid,n=t.__uuid;if(!(e==null||n==null))for(const s of Object.keys(this.#t[e]))await crs.binding.providers.update(n,s)}async updateContext(t){const e=this.getContext(t);if(!(e==null||e.boundElements==null))for(const n of e.boundElements){const s=this.#i[n];if(s==null)continue;const a=Array.from(s);await crs.binding.providers.updateProviders(n,...a)}}async updateUI(t,e){const n=this.getContext(t);n==null||n.boundElements==null||await this.#r(t,e)}async addCallback(t,e,n){const s=this.#t[t];s[e]==null&&(s[e]=new Set),s[e].add(n)}async removeCallback(t,e,n){const s=this.#t[t];s[e]!=null&&s[e].delete(n)}}export{l as BindingData};
