class p{static async perform(a,t,r,s){await this[a.action](a,t,r,s)}static async observe(a,t,r,s){const e=await crs.dom.get_element(a.args.element,t,r,s),c=await crs.process.getValue(a.args.properties,t,r,s),l=await crs.process.getValue(a.args.callback,t,r,s);e._dataId==null&&(e._dataId=crsbinding.data.addObject(e.id));let n=e._dataId;e._processObserver=e._processObserver||{nextId:0};const o=b(e);e._processObserver[o]={properties:c,eval:u(e,c,o),callback:l};for(let i of c)crsbinding.data.addCallback(n,i,e._processObserver[o].eval);return o}static async unobserve(a,t,r,s){const e=await crs.dom.get_element(a.args.element,t,r,s),c=await crs.process.getValue(a.args.ids,t,r,s);for(const l of c){const n=e._processObserver[l];for(const o of n.properties)crsbinding.data.removeCallback(e._dataId,o,n.eval);n.properties=null,n.eval=null,n.callback=null,delete e._processObserver[l]}}static async notify_ready(a,t,r,s){const e=await crs.dom.get_element(a.args.element,t,r,s);e.dataset.ready="true",e.dispatchEvent(new CustomEvent("ready",{bubbles:!1}))}static async on_ready(a,t,r,s){const e=await crs.dom.get_element(a.args.element,t,r,s),c=await crs.process.getValue(a.args.callback,t,r,s),l=await crs.process.getValue(a.args.caller,t,r,s);if(e.dataset.ready=="true")return await c.call(l);const n=async()=>{e.removeEventListener("ready",n),await c.call(l)};e.addEventListener("ready",n)}}function b(d){const a=d._processObserver.nextId;return d._processObserver.nextId=a+1,a}function u(d,a,t){let r=["if ( "];for(const e of a)r.push(`crsbinding.data.getProperty(this._dataId, "${e}")  != null && `);return r.push(`) { this._processObserver[${t}].callback.call(this) };`),r=r.join("").replace("&& )",")"),new Function(r).bind(d)}crs.intent.component=p;export{p as ComponentActions};
