class b{static async perform(a,s,t,r){await this[a.action](a,s,t,r)}static async observe(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r),l=await crs.process.getValue(a.args.properties,s,t,r),n=await crs.process.getValue(a.args.callback,s,t,r);e._dataId==null&&(e._dataId=crsbinding.data.addObject(e.id));let c=e._dataId;e._processObserver=e._processObserver||{nextId:0};const o=f(e);e._processObserver[o]={properties:l,eval:m(e,l,o),callback:n};for(let d of l)crsbinding.data.addCallback(c,d,e._processObserver[o].eval);return a.args.target!=null&&await crs.process.setValue(a.args.target,o,s,t,r),o}static async unobserve(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r),l=await crs.process.getValue(a.args.ids,s,t,r);for(let n of l){n=await crs.process.getValue(n,s,t,r);const c=e._processObserver[n];for(const o of c.properties)crsbinding.data.removeCallback(e._dataId,o,c.eval);c.properties=null,c.eval=null,c.callback=null,delete e._processObserver[n]}}static async notify_ready(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r);e.dataset.ready="true",delete e.dataset.loading,e.dispatchEvent(new CustomEvent("ready",{bubbles:!0,composed:!0}))}static async notify_loading(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r);e.dataset.loading="true",e.dispatchEvent(new CustomEvent("loading",{bubbles:!0,composed:!0}))}static async on_ready(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r),l=await crs.process.getValue(a.args.callback,s,t,r),n=await crs.process.getValue(a.args.caller,s,t,r);if(e.dataset.ready=="true")return await l.call(n);const c=async()=>{e.removeEventListener("ready",c),await l.call(n)};e.addEventListener("ready",c)}static async on_loading(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r),l=await crs.process.getValue(a.args.callback,s,t,r),n=await crs.process.getValue(a.args.caller,s,t,r);if(e.dataset.loading=="true")return await l.call(n);const c=async()=>{e.removeEventListener("loading",c),await l.call(n)};e.addEventListener("loading",c)}static async wait_for_element_render(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r);return e.offsetWidth>0&&e.offsetHeight>0?!0:new Promise(l=>{const n=new ResizeObserver(()=>{e.offsetWidth>0&&e.offsetHeight>0&&(n.disconnect(),l(!0))});n.observe(e)})}static async load_html(a,s,t,r){const e=await crs.dom.get_element(a.args.element,s,t,r),l=await crs.process.getValue(a.args.url,s,t,r),n=await crs.process.getValue(a.args.has_css,s,t,r),c=new URL(l.replace(".js",".html")),o=await fetch(c).then(d=>d.text());if(n===!0)return new Promise(d=>{const u=new URL(l.replace(".js",".css"));e.innerHTML=`<link rel="stylesheet" href="${u}">${o}`;const g=e.querySelector("link");g.onload=()=>{g.onload=null,d()}});e.innerHTML=o}}function f(i){const a=i._processObserver.nextId;return i._processObserver.nextId=a+1,a}function m(i,a,s){let t=["if ( "];for(const e of a)t.push(`crsbinding.data.getProperty(this._dataId, "${e}")  != null && `);return t.push(`) { this._processObserver[${s}].callback.call(this) };`),t=t.join("").replace("&& )",")"),new Function(t).bind(i)}crs.intent.component=b;export{b as ComponentActions};
