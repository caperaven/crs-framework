import{RouteManager as p}from"./managers/router-manager.js";class f{static async perform(e,a,r,t){await this[e.action](e,a,r,t)}static async register(e,a,r,t){const s=await crs.process.getValue(e.args.definition,a,r,t),o=await crs.process.getValue(e.args.routes,a,r,t),l=await crs.process.getValue(e.args.callback,a,r,t);globalThis.routeManager=new p(o,s,l)}static async dispose(e,a,r,t){globalThis.routeManager?.dispose(),delete globalThis.routeManager}static async parse(e,a,r,t){let s=await crs.process.getValue(e.args.url||window.location.href,a,r,t);s.indexOf("://")===-1&&(s=`http://${s}`);const o={params:{},query:{}},l=s.split("?")[1]?.split("&");s=s.split("?")[0];const c=s.split("/");o.protocol=c[0].replace(":",""),o.host=c[2];const g=globalThis.routeManager?.definition?.parameters;for(let i=3;i<c.length;i++){const u=i-3,n=g?.[u]??u;o.params[n]=c[i]}if(l)for(const i of l){const u=i.split("=")[0],n=i.split("=")[1];o.query[u]=n}return o}static async create_url(e,a,r,t){const s=await crs.process.getValue(e.args.definition,a,r,t);if(s==null)return;const o=[s.protocol||"http","://"].join(""),l=s.host,c=[],g=[];if(s.params)for(const n in s.params)c.push(s.params[n]);if(s.query)for(const n in s.query)g.push([`${n}=${s.query[n]}`]);const i=c.join("/"),u=g.length===0?"":`?${g.join("&")}`;return`${o}${l}/${i}${u}`}static async goto(e,a,r,t){await globalThis.routeManager?.goto(e.args.definition)}static async refresh(e,a,r,t){await globalThis.routeManager?.refresh()}static async set_parameters(e,a,r,t){const s=await crs.process.getValue(e.args.parameters,a,r,t);if(s==null)return;const o=await crs.process.getValue(e.args.refresh||!1,a,r,t);globalThis.routeManager.setParameters(s),o&&await globalThis.routeManager.refresh()}static async set_queries(e,a,r,t){const s=await crs.process.getValue(e.args.queries,a,r,t);if(s==null)return;const o=await crs.process.getValue(e.args.refresh||!1,a,r,t);globalThis.routeManager?.setQueries(s),o&&await globalThis.routeManager.refresh()}}crs.intent.route=f;export{f as RouteActions};
