class f{static async perform(e,n,a,r){await this[e.action](e,n,a,r)}static async load(e,n,a,r){if(await crs.process.getValue(e.args.dialog,n,a,r)==!0){const l=await m(e);let i=[];for(const s of l){const c=await d(s.name);i.push({name:c.name,ext:c.ext,type:s.type,size:s.size,value:s})}return e.args.target!=null&&await crs.process.setValue(e.args.target,i,n,a,r),i}else{const l=await p(e,n,a,r);return e.args.target!=null&&await crs.process.setValue(e.args.target,l,n,a,r),l}}static async save(e,n,a,r){const t=await crs.process.getValue(e.args.details,n,a,r);let l=document.createElement("a");l.style.display="none",document.body.appendChild(l);for(let i of t){let s=new Blob([i.value],{type:i.type}),c=window.URL.createObjectURL(s);l.href=c,l.download=`${i.name}.${i.ext}`,l.click(),window.URL.revokeObjectURL(c),c=null,s=null}l.parentElement.removeChild(l),l=null}static async save_canvas(e,n,a,r){const t=await crs.dom.get_element(e.args.source),l=await crs.process.getValue(e.args.name,n,a,r)||"image",i=t.toDataURL("image/png");let s=document.createElement("a");s.style.display="none",document.body.appendChild(s),s.href=i.replace("image/png","image/octet-stream"),s.download=`${l}.png`,s.click(),s.parentElement.removeChild(s),s=null}static async enable_dropzone(e,n,a,r){const t=await crs.dom.get_element(e.args.element,n,a,r),l=await crs.process.getValue(e.args.dropHandler,n,a,r),i=await crs.process.getValue(e.args.dragOverHandler,n,a,r),s=await crs.process.getValue(e.args.dragLeaveHandler,n,a,r),c=w.bind(this,l),g=v.bind(this,i),u=_.bind(this,s);t.addEventListener("drop",c),t.addEventListener("dragover",g),t.addEventListener("dragleave",u),t.__dropHandler=c,t.__dragoverHandler=g,t.__dragleaveHandler=u}static async disable_dropzone(e,n,a,r){const t=await crs.dom.get_element(e.args.element,n,a,r);t.removeEventListener("drop",t.__dropHandler),t.removeEventListener("dragover",t.__dragoverHandler),t.removeEventListener("dragleave",t.__dragleaveHandler),delete t.__dropHandler,delete t.__dragoverHandler,delete t.__dragleaveHandler}}class y{static async blob(e){return new Promise(n=>{const a=new FileReader;a.onload=()=>{a.onload=null,n(a.result)},a.readAsArrayBuffer(e)})}}async function d(o){const e=o.split("/"),a=e[e.length-1].split("."),r=a[a.length-1];return{name:a[0],ext:r}}async function m(){return new Promise(o=>{let e=document.createElement("input");e.type="file",e.setAttribute("multiple","multiple"),e.onchange=()=>{e.onchange=null;const n=Array.from(e.files);o(n)},e.click()})}async function p(o,e,n,a){const r=await crs.process.getValue(o.args.files,e,n,a),t=[];for(const l of r){const i=await d(l);t.push({name:i.name,ext:i.ext,value:await fetch(l).then(s=>s.blob())})}return t}async function v(o,e){e.preventDefault(),o.call(this,e)}async function _(o,e){e.preventDefault(),o.call(this,e)}async function w(o,e){e.preventDefault();const n=e.dataTransfer.files,a=[];for(const r of n){const t=await d(r.name);a.push({type:r.type,name:t.name,ext:t.ext,size:r.size,value:r})}o.call(this,a)}crs.intent.files=f;export{y as FileFormatter,f as FilesActions,d as get_file_name,p as get_files};
