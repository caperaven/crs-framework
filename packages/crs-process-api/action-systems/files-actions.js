const d=Object.freeze({TEXT:"text",JSON:"json"}),w=Object.freeze({[d.TEXT]:l=>l,[d.JSON]:l=>JSON.parse(l)});class y{static async perform(e,a,t,n){await this[e.action](e,a,t,n)}static async load(e,a,t,n){if(await crs.process.getValue(e.args.dialog,a,t,n)==!0){const s=await b(e);let i=[];for(const o of s){const c=await g(o.name);i.push({name:c.name,ext:c.ext,type:o.type,size:o.size,value:o})}return e.args.target!=null&&await crs.process.setValue(e.args.target,i,a,t,n),i}else{const s=await E(e,a,t,n);return e.args.target!=null&&await crs.process.setValue(e.args.target,s,a,t,n),s}}static async load_as(e,a,t,n){const r=await crs.process.getValue(e.args.dialog,a,t,n)??!1,s=await crs.process.getValue(e.args.file_format,a,t,n)??d.JSON,i=d[s.toUpperCase()];if(i==null)throw new Error(`Invalid file format: ${s}`);const o=[],c=r==!1?e.args.file_paths:[],p=await crs.call("files","load",{dialog:r,files:c});for(const h of p)await v(h,i,o);return e.args.target!=null&&await crs.process.setValue(e.args.target,o,a,t,n),o}static async save(e,a,t,n){const r=await crs.process.getValue(e.args.details,a,t,n);let s=document.createElement("a");s.style.display="none",document.body.appendChild(s);for(let i of r){let o=new Blob([i.value],{type:i.type}),c=window.URL.createObjectURL(o);s.href=c,s.download=`${i.name}.${i.ext}`,s.click(),window.URL.revokeObjectURL(c),c=null,o=null}s.parentElement.removeChild(s),s=null}static async save_canvas(e,a,t,n){const r=await crs.dom.get_element(e.args.source),s=await crs.process.getValue(e.args.name,a,t,n)||"image",i=r.toDataURL("image/png");let o=document.createElement("a");o.style.display="none",document.body.appendChild(o),o.href=i.replace("image/png","image/octet-stream"),o.download=`${s}.png`,o.click(),o.parentElement.removeChild(o),o=null}static async enable_dropzone(e,a,t,n){const r=await crs.dom.get_element(e.args.element,a,t,n),s=await crs.process.getValue(e.args.callback,a,t,n),i=await crs.process.getValue(e.args.drop_template,a,t,n),o=await crs.process.getValue(e.args.drop_classes,a,t,n);r.addEventListener("drop",m),r.addEventListener("dragenter",u),r.addEventListener("dragover",f),r.addEventListener("dragleave",_),r.__callback=s,r.__dropTemplate=i,r.__highlighted=!1,r.__dropClasses=o}static async disable_dropzone(e,a,t,n){const r=await crs.dom.get_element(e.args.element,a,t,n);r.removeEventListener("drop",m),r.removeEventListener("dragenter",u),r.removeEventListener("dragover",f),r.removeEventListener("dragleave",_),await crs.call("dom_interactive","remove_animation_layer"),delete r.__callback,delete r.__dropTemplate,delete r.__highlighted,delete r.__dropClasses,delete r.__dropBounds}}class T{static async blob(e){return new Promise(a=>{const t=new FileReader;t.onload=()=>{t.onload=null,a(t.result)},t.readAsArrayBuffer(e)})}}async function v(l,e,a){return new Promise((t,n)=>{const r=new FileReader;r.onload=s=>{const i=w[e](s.target.result);a.push(i),t(a)},r.onerror=()=>n(new Error("Failed to read file.")),r.readAsText(l.value,"UTF-8")})}async function g(l){const e=l.split("/"),t=e[e.length-1].split("."),n=t[t.length-1];return{name:t[0],ext:n}}async function b(){return new Promise(l=>{let e=document.createElement("input");e.type="file",e.setAttribute("multiple","multiple"),e.onchange=()=>{e.onchange=null;const a=Array.from(e.files);l(a)},e.click()})}async function E(l,e,a,t){const n=await crs.process.getValue(l.args.files,e,a,t),r=[];for(const s of n){const i=await g(s);r.push({name:i.name,ext:i.ext,value:await fetch(s).then(o=>o.blob())})}return r}async function u(l){l.preventDefault();const e=l.currentTarget;e.__highlighted!==!0&&(await crs.call("dom_interactive","highlight",{target:e,template:e.__dropTemplate,classes:e.__dropClasses}),e.__highlighted=!0),e.__dropBounds=e.getBoundingClientRect(),e.__callback({action:"dragEnter",event:l})}async function f(l){l.preventDefault()}async function _(l){l.preventDefault();const e=l.currentTarget,a=l.currentTarget.__dropBounds;a!=null&&(l.x>=a.left&&l.x<=a.right&&l.y>=a.top&&l.y<=a.bottom||(await crs.call("dom_interactive","remove_animation_layer"),e.__highlighted=!1,e.__callback({action:"dragLeave",event:l})))}async function m(l){l.preventDefault();const e=l.currentTarget;await crs.call("dom_interactive","remove_animation_layer"),e.__highlighted=!1;const a=l.dataTransfer.files,t=[];for(const n of a){const r=await g(n.name);t.push({type:n.type,name:r.name,ext:r.ext,size:n.size,value:n})}e.__callback({action:"drop",event:l,results:t})}crs.intent.files=y;export{T as FileFormatter,y as FilesActions,g as get_file_name,E as get_files};
