import o,{unique_values as u,filter as l,init_panic_hook as g,group as w}from"./../bin/data_processing.js";await o();class f{static async perform(a,r,s,t){await this[a.action](a,r,s,t)}static init_panic_hook(a,r,s,t){g()}static async unique_values(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.fields,r,s,t),n=await crs.process.getValue(a.args.rows,r,s,t);if(!Array.isArray(e))throw new Error("Fields must be an array");if(!Array.isArray(c))throw new Error("Fields must be an array");const i=u(e,c,n);return a.args.target&&await crs.process.setValue(a.args.target,i,r,s,t),i}static async filter(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),n=await crs.process.getValue(a.args.case_sensitive??!1,r,s,t),i=l(e,c,n);return a.args.target&&await crs.process.setValue(a.args.target,i,r,s,t),i}static async group(a,r,s,t){g();const e=await crs.process.getValue(a.args.source,r,s,t),c=await crs.process.getValue(a.args.intent,r,s,t),n=await crs.process.getValue(a.args.rows,r,s,t),i=w(e,c,n);return a.args.target&&await crs.process.setValue(a.args.target,i,r,s,t),i}}crs.intent.data_processing=f;export{f as DataProcessing};
