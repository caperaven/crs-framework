import l,{unique_values as o,filter as w,group as V,sort as f,get_perspective as d,init_panic_hook as y,aggregate as _,fuzzy_filter as v}from"../wasm/data_processing.js";await l();class h{static async perform(a,r,s,t){await this[a.action](a,r,s,t)}static init_panic_hook(a,r,s,t){y()}static async aggregate(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.intent,r,s,t),g=await crs.process.getValue(a.args.rows,r,s,t),c=_(e,i,g);return a.args.target&&await crs.process.setValue(a.args.target,c,r,s,t),c}static async unique_values(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.fields,r,s,t),g=await crs.process.getValue(a.args.rows,r,s,t);if(!Array.isArray(e))throw new Error("Fields must be an array");if(!Array.isArray(i))throw new Error("Fields must be an array");const c=o(e,i,g);return a.args.target&&await crs.process.setValue(a.args.target,c,r,s,t),c}static async filter(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.intent,r,s,t),g=await crs.process.getValue(a.args.case_sensitive??!1,r,s,t),c=w(e,i,g);return a.args.target&&await crs.process.setValue(a.args.target,c,r,s,t),c}static async group(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.intent,r,s,t),g=await crs.process.getValue(a.args.rows,r,s,t),c=V(e,i,g);return a.args.target&&await crs.process.setValue(a.args.target,c,r,s,t),c}static async sort(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.intent,r,s,t),g=await crs.process.getValue(a.args.rows,r,s,t),c=f(e,i,g);return a.args.target&&await crs.process.setValue(a.args.target,c,r,s,t),c}static async get_perspective(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.intent,r,s,t),g=d(e,i);return a.args.target&&await crs.process.setValue(a.args.target,g,r,s,t),g}static async fuzzy_filter(a,r,s,t){const e=await crs.process.getValue(a.args.source,r,s,t),i=await crs.process.getValue(a.args.value,r,s,t);if(e==null||e.length===0)return[];let g;const c=await crs.process.getValue(a.args.include??[],r,s,t);if(c.length>0)g=c;else{const n=await crs.process.getValue(a.args.exclude??[],r,s,t);g=Object.keys(e[0]).filter(u=>!n.includes(u))}return v(e,{fields:g,value:String(i)})}}crs.intent.data_processing=h;export{h as DataProcessing};
