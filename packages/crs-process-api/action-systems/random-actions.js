class n{static async perform(t,a,s,e){return await this[t.action](t,a,s,e)}static async generate_object(t,a,s,e){const r=await crs.process.getValue(t.args.definition,a,s,e)}static async generate_collection(t,a,s,e){const r=await crs.process.getValue(t.args.definition,a,s,e),i=await crs.process.getValue(t.args.count,a,s,e)}static async integer(t,a,s,e){let r=Math.floor(Math.random()*(t.args.max-t.args.min+1))+t.args.min;return t.args?.target!=null&&await crs.process.setValue(t.args.target,r,a,s,e),r}static async float(t,a,s,e){let r=Math.random()*(t.args.max-t.args.min+1)+t.args.min;return t.args?.target!=null&&await crs.process.setValue(t.args.target,r,a,s,e),r}static async string(t,a,s,e){}static async date(t,a,s,e){}static async time(t,a,s,e){}static async duration(t,a,s,e){}static async boolean(t,a,s,e){}}crs.intent.random=n;export{n as RandomActions};
