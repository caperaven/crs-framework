class o{#t;#s;#e;#i;#n;#h;#o;constructor(t,s){this.#t=t,this.#n=s,this.#s=this.#l.bind(this),this.#e=this.#r.bind(this),this.#i=this.#m.bind(this),this.#t.style.position="fixed",this.#t.style.left=0,this.#t.style.top=0,this.#t.addEventListener("mousedown",this.#s),t.__moveManager=this}dispose(){this.#t.removeEventListener("mousedown",this.#s),this.#s=null,this.#e=null,this.#i=null,delete this.#t.__moveManager,this.#t=null}#u(t){const s=t.composedPath(),e=s[0];return this.#n==null?e===this.#t:e.matches(this.#n)?!0:s.find(i=>i.matches&&i.matches(this.#n))!=null}#l(t){this.#u(t)!==!1&&(t.preventDefault(),this.#h={x:t.clientX,y:t.clientY},this.#o=this.#t.getBoundingClientRect(),document.addEventListener("mousemove",this.#e),document.addEventListener("mouseup",this.#i))}#r(t){let s=t.clientX-this.#h.x,e=t.clientY-this.#h.y;this.#t.style.translate=`${this.#o.x+s}px ${this.#o.y+e}px`}#m(t){document.removeEventListener("mousemove",this.#e),document.removeEventListener("mouseup",this.#i),this.#h=null,this.#o=null}}export{o as MoveManager};
