import{getMouseInputMap as l,clientX as h,clientY as o}from"./input-mapping.js";class r extends crs.classes.Observable{#t;#m;#l;#a;#u;#e;#i;#n;#r=this.#c.bind(this);#h;#o;#s;constructor(t,i,s){super(),this.#t=t,this.#e=i,this.#m=s,this.#l=this.#p.bind(this),this.#a=this.#v.bind(this),this.#u=this.#f.bind(this),this.#t.style.position="fixed",this.#t.style.left=0,this.#t.style.top=0,this.#s=l(),this.#t.addEventListener(this.#s.mousedown,this.#l,{passive:!1}),t.__moveManager=this,s!=null&&this.addEventListener("moved",s)}dispose(){this.removeEventListener("moved",this.#m),this.#t.removeEventListener(this.#s.mousedown,this.#l),this.#l=null,this.#a=null,this.#u=null,this.#e=null,this.#i=null,this.#n=null,this.#s=null,this.#r=null,this.#h=null,this.#o=null,delete this.#t.__moveManager,this.#t=null,super.dispose()}#d(t){const i=t.composedPath(),s=i[0];return this.#e==null?s===this.#t:s.matches(this.#e)?!0:i.find(n=>n.matches&&n.matches(this.#e))!=null}async#p(t){this.#d(t)!==!1&&(this.#i={x:h(t),y:o(t)},this.#n=this.#t.getBoundingClientRect(),this.#t.style.willChange="translate",document.addEventListener(this.#s.mousemove,this.#a,{passive:!1}),document.addEventListener(this.#s.mouseup,this.#u,{passive:!1}),this.#r(),t.preventDefault(),t.stopPropagation())}async#c(){this.#i!=null&&(this.#t.style.translate=`${this.#n.x+this.#h}px ${this.#n.y+this.#o}px`,requestAnimationFrame(this.#r))}async#v(t){this.#h=h(t)-this.#i.x,this.#o=o(t)-this.#i.y,t.preventDefault(),t.stopPropagation()}async#f(t){const i=this.#h,s=this.#o,e=this.#t;document.removeEventListener(this.#s.mousemove,this.#a),document.removeEventListener(this.#s.mouseup,this.#u),this.#i=null,this.#n=null,this.#h=null,this.#o=null,t.preventDefault(),t.stopPropagation(),this.notify("moved",{element:e,x:i,y:s})}}export{r as MoveManager};
