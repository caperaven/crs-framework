class a{#a;#e;#s;#t;#n=!1;#i=this.#r.bind(this);get definition(){return this.#e}get routeDefinition(){return Object.freeze(this.#t)}constructor(t,s,e){this.#a=t,this.#e=s,this.#s=e,this.goto(globalThis.location.href).then(()=>{addEventListener("popstate",this.#i)})}dispose(){removeEventListener("popstate",this.#i),this.#a=null,this.#e=null,this.#s=null,this.#t=null,this.#i=null,this.#n=null}async#r(t){t.preventDefault(),this.#t=await crs.call("route","parse",{url:globalThis.location.href}),await this.#s?.(this.#t)}async goto(t){typeof t=="string"&&(t=await crs.call("route","parse",{url:t})),this.#t=t;const s=await crs.call("route","create_url",{definition:this.#t});history.pushState(null,null,s),await this.#s?.(this.#t)}async refresh(){return new Promise(async t=>{await this.#s?.(this.#t),t()})}setParameters(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.params[s]=t[s]}setQueries(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.query[s]=t[s]}}export{a as RouteManager};
